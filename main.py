import os
import requests
import xml.etree.ElementTree as ET
import re
import html
import json
import schedule
import time

# –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–¥–ª—è Railway)

# ============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
CHAT_ID             = os.getenv("CHAT_ID")  # –û—Å–Ω–æ–≤–Ω–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6983437462)
OPENROUTER_API_KEY  = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_CHAT_URL = "https://openrouter.ai/api/v1/chat/completions"

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–¥–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ)
CHAT_IDS = [CHAT_ID, "5999167622"] if CHAT_ID else ["5999167622"]

RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/artificial_intelligence/"
]

KEYWORDS = [
    "–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
]

SEEN_FILE = "seen_links.json"


# ============================
# –†–∞–±–æ—Ç–∞ —Å seen_links.json
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)


# ============================
# –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
# ============================
def get_one_news():
    seen = load_seen()
    for url in RSS_FEEDS:
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            r.raise_for_status()
            root = ET.fromstring(r.content)
            for item in root.findall(".//item")[:5]:
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                txt = (title + " " + desc).lower()
                if any(kw in txt for kw in KEYWORDS):
                    seen.add(link)
                    save_seen(seen)
                    return {"title": title, "desc": desc, "link": link}
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ {url}: {e}")
    return None


# ============================
# Fallback –ø–æ—Å—Ç (—Å –∑–∞—à–∏—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –∏ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º P.S.)
# ============================
def fallback_post(news):
    return (
        f"üîç {news['title']}\n\n"
        "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
        f"{news['desc'][:200]}...\n\n"
        "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
        "–≠—Ç–æ –∑–Ω–∞—á–∏–º–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href='{news['link']}'>–∑–¥–µ—Å—å</a>.\n\n"
        "üí° P.S. –ê –ò–ò —É–∂–µ —à—É—Ç–∏—Ç –ª—É—á—à–µ, —á–µ–º –º–æ–π –∫–æ—Ñ–µ ‚Äî –±–æ–¥—Ä–æ –∏ –±–µ–∑ –æ—Å–∞–¥–∫–∞! üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
    )


# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API
# ============================
def generate_post(news):
    if not OPENROUTER_API_KEY:
        print("[WARN] OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî fallback")
        return fallback_post(news)
    
    prompt = (
        "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è –ø–æ—Å—Ç–∞. –ù–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ä–∞–∑–¥–µ–ª—ã. –ë–µ–∑ —á–∏—Å–ª–æ–≤–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏. –ó–∞—à–∏–≤–∞–π —Å—Å—ã–ª–∫—É –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏' –∫–∞–∫ HTML-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href=\"{link}\">–∑–¥–µ—Å—å</a>'). –î–ª—è P.S. –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ), –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫ —Ç–µ–º–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ò–ò/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏), —Å —ç–º–æ–¥–∑–∏ üöÄ.\n\n"
        f"–§–æ—Ä–º–∞—Ç:\n"
        f"üîç {news['title']}\n\n"
        "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
        "[–ö—Ä–∞—Ç–∫–æ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–∏]\n\n"
        "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
        "[–ö—Ä–∞—Ç–∫–æ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ñ–µ—Ä—ã –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π]\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href='{news['link']}'>–∑–¥–µ—Å—å</a>.\n\n"
        "üí° P.S. [–Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫ —Ç–µ–º–µ, 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ] üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>\n\n'
        f"---\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}\n"
        f"–°—Å—ã–ª–∫–∞: {news['link']}"
    )
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò —Å —é–º–æ—Ä–æ–º. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —Ñ–æ—Ä–º–∞—Ç—É, –∑–∞—à–∏–≤–∞–π —Å—Å—ã–ª–∫—É –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–π —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π P.S."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.6,
        "max_tokens": 400
    }
    
    try:
        resp = requests.post(OPENROUTER_CHAT_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] OpenRouter API {resp.status_code}: {resp.text}")
            return fallback_post(news)
        data = resp.json()
        generated = data["choices"][0]["message"]["content"].strip()
        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ—á–∫—É, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if '<a href="https://t.me/BrainAid_bot">' not in generated:
            generated += '\n\n<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
        return generated
    except Exception as e:
        print(f"[ERROR] OpenRouter API: {e}")
        return fallback_post(news)


# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
# ============================
def send_message(text):
    if not TELEGRAM_TOKEN:
        print("[ERROR] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    for chat_id in CHAT_IDS:
        if not chat_id:
            continue
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
            "link_preview_options": json.dumps({
                "is_disabled": False,
                "show_above_text": True
            })
        }
        r = requests.post(url, data=payload, timeout=10)
        if r.status_code != 200:
            print(f"[ERROR] Telegram API {r.status_code} –¥–ª—è {chat_id}: {r.text}")
        else:
            print(f"[OK] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")


# ============================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
# ============================
def job():
    news = get_one_news()
    if not news:
        print("[INFO] –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post = generate_post(news)
    send_message(post)
    print("[DONE] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")


# ============================
# MAIN —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ –ú–°–ö)
# ============================
def main():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤—Ä–µ–º—è –ú–°–ö, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
    schedule.every().day.at("08:30").do(job)
    schedule.every().day.at("15:30").do(job)
    schedule.every().day.at("19:30").do(job)

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    main()
