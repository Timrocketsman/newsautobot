import requests
import xml.etree.ElementTree as ET
import re
import html
import json
import os

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
# ============================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID        = os.getenv("CHAT_ID")
AI_API_KEY     = os.getenv("AI_API_KEY")        # DeepSeek –∫–ª—é—á
AI_MODEL       = os.getenv("AI_MODEL", "deepseek-chat")
AI_URL         = os.getenv("AI_URL", "https://api.deepseek.com/v1/chat/completions")

RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/artificial_intelligence/"
]

KEYWORDS = [
    "–ò–ò", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
]

SEEN_FILE = "seen_links.json"

# ============================
# –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

# ============================
# –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–π —Å–≤–µ–∂–µ–π –Ω–æ–≤–æ—Å—Ç–∏
# ============================
def get_one_news():
    seen = load_seen()
    for feed_url in RSS_FEEDS:
        try:
            resp = requests.get(feed_url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            resp.raise_for_status()
            root = ET.fromstring(resp.content)
            for item in root.findall(".//item")[:5]:
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                combined = (title + " " + desc).lower()
                if any(kw.lower() in combined for kw in KEYWORDS):
                    seen.add(link)
                    save_seen(seen)
                    return {"title": title, "desc": desc, "link": link}
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ RSS {feed_url}: {e}")
    return None

# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API
# ============================
def generate_post(news):
    if not AI_API_KEY:
        print("[WARN] AI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω")
        return fallback_post(news)

    prompt = f"""
–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò. –°–æ—Å—Ç–∞–≤—å Telegram-–ø–æ—Å—Ç:

üîç {news['title']}

1Ô∏è‚É£ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?
[1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏]

2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?
[–∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π]

4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
üîó {news['link']}

üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ

<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è
<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è
<a href="https://brainaid.ru/">–°–∞–π—Ç</a>

---
–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}
"""

    headers = {
        "Authorization": f"Bearer {AI_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    data = {
        "model": AI_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 400
    }
    try:
        response = requests.post(AI_URL, headers=headers, json=data, timeout=30)
        if response.status_code != 200:
            print(f"[ERROR] AI API {response.status_code}: {response.text}")
            return fallback_post(news)
        content = response.json()
        return content["choices"][0]["message"]["content"]
    except Exception as e:
        print(f"[ERROR] AI API Error: {e}")
        return fallback_post(news)

# ============================
# Fallback –ø–æ—Å—Ç –±–µ–∑ AI
# ============================
def fallback_post(news):
    return f"""üîç {news['title']}

4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
üîó {news['link']}

üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ

<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è
<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è
<a href="https://brainaid.ru/">–°–∞–π—Ç</a>"""

# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
# ============================
def send_message(text):
    if not TELEGRAM_TOKEN:
        print("[ERROR] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False,
        "link_preview_options": json.dumps({
            "is_disabled": False,
            "show_above_text": True
        })
    }
    r = requests.post(url, data=payload, timeout=10)
    if r.status_code != 200:
        print(f"[ERROR] Telegram API {r.status_code}: {r.text}")
    else:
        print("[OK] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# ============================
# MAIN
# ============================
def main():
    news = get_one_news()
    if not news:
        print("[INFO] –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post_text = generate_post(news)
    send_message(post_text)

if __name__ == "__main__":
    main()
