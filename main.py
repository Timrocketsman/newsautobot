import requests
import xml.etree.ElementTree as ET
import re
import random
import html
import json
import os
import schedule
import time

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================
TELEGRAM_TOKEN = "8141858682:AAG_k13Rd2WClI1SDL9W7-zC0vFuRUUkfUw"

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–°
CHAT_ID        = "6983437462"       
# –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
CHANNEL_ID     = "-1002047105840"   

# RSS-–ª–µ–Ω—Ç—ã
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://tproger.ru/rss",
    "https://geekbrains.ru/posts/rss",
    "https://cnews.ru/xml/cnews.rss",
    "https://www.ixbt.com/export/news.xml",
    "https://proglib.io/rss",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/machine-learning/",
    "https://habr.com/ru/rss/hub/artificial_intelligence/",
    "https://habr.com/ru/rss/hub/data-science/"
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
KEYWORDS = [
    "–ò–ò", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "—Ç—Ä–µ–Ω–¥",
    "–Ω–µ–π—Ä–æ", "–ø—Ä–æ–º–ø—Ç", "–∏–Ω—Ñ–µ—Ä–µ–Ω—Å", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
    "nlp", "stable diffusion", "midjourney", "claude",
    "—á–∞—Ç-–±–æ—Ç", "—á–∞—Ç–±–æ—Ç", "qwen", "gemini", "–ø–µ—Ä–ø–ª–µ–∫—Å"
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
SEEN_FILE = "seen_links.json"

# ============================
# –§—É–Ω–∫—Ü–∏–∏
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

def parse_rss(url, seen):
    articles = []
    try:
        resp = requests.get(url, headers={"User-Agent":"Mozilla/5.0"}, timeout=10)
        resp.raise_for_status()
        root = ET.fromstring(resp.content)
        for item in root.findall(".//item")[:10]:
            link = item.findtext("link", "").strip()
            if not link or link in seen:
                continue
            title = item.findtext("title", "").strip()
            desc  = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
            text  = (title + " " + desc).lower()
            if any(kw.lower() in text for kw in KEYWORDS):
                articles.append({"title": title, "link": link})
    except Exception as e:
        print(f"[ERROR] RSS {url}: {e}")
    return articles

def collect_news():
    seen = load_seen()
    fresh = []
    for feed in RSS_FEEDS:
        print(f"[INFO] –ß—Ç–µ–Ω–∏–µ: {feed}")
        fresh += parse_rss(feed, seen)
    return fresh, seen

def format_message(article):
    title = article["title"]
    if len(title) > 80:
        title = title[:77] + "..."
    link = article["link"]
    msg = f"{html.escape(link)}\n\n"
    msg += f"üîç {html.escape(title)}\n\n"
    msg += "üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ\n\n"
    msg += (
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è'
        '<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è'
        '<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
    )
    return msg

def send_message(text, to_channel=False):
    chat_id = CHANNEL_ID if to_channel else CHAT_ID
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    r = requests.post(url, data=payload, timeout=10)
    if r.status_code == 200:
        print("[SUCCESS] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"[ERROR] {r.status_code}: {r.text}")

# ============================
# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
# ============================
def job():
    fresh, seen = collect_news()
    if not fresh:
        print("[WARNING] –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    article = random.choice(fresh)
    seen.add(article["link"])
    save_seen(seen)
    msg = format_message(article)
    send_message(msg, to_channel=False)  # —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –≤ –õ–°
    # –î–ª—è –∫–∞–Ω–∞–ª–∞: send_message(msg, to_channel=True)

# ============================
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)
# ============================
def main():
    print("[INFO] –†–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–π —á–∞—Å)")
    schedule.every(1).hours.do(job)
    
    # –í—ã–ø–æ–ª–Ω–∏–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    job()
    
    while True:
        schedule.run_pending()
        time.sleep(30)

if __name__ == "__main__":
    main()
