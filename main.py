import os
import requests
import xml.etree.ElementTree as ET
import re
import json
from bs4 import BeautifulSoup  # –î–ª—è HTML-–ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ-RSS —Å–∞–π—Ç–æ–≤
from html import escape  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML

# –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
CHAT_ID             = os.getenv("CHAT_ID")
OPENROUTER_API_KEY  = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_CHAT_URL = "https://openrouter.ai/api/v1/chat/completions"

# –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
CHAT_IDS = [CHAT_ID, "5999167622"] if CHAT_ID else ["5999167622"]

# –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://3dnews.ru/news/rss",
    "https://neuro-ai.ru/news",  # HTML
    "https://hi-tech.mail.ru/tag/neyroseti/",  # HTML
    "https://vc.ru/tag/%D0%BD%D0%B5%D0%B9%D1%80%D0%BE%D1%81%D0%B5%D1%82%D0%B8",  # HTML
    "https://www.forbes.ru/tegi/neyroseti",  # HTML
    "https://neurohive.io/ru/novosti/",  # HTML
    "https://habr.com/ru/hubs/artificial_intelligence/",  # HTML
    "https://aimagazine.com/feed",  # RSS (–µ—Å–ª–∏ 403, –ø—Ä–æ–ø—É—Å—Ç–∏–º)
    "https://spectrum.ieee.org/rss.xml?topic=neural-networks",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π RSS –¥–ª—è IEEE (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    "https://www.technology.org/feed/",  # –û–±—â–∏–π RSS Technology.org (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, —Ç–∞–∫ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª 403)
    "https://www.artificialintelligence-news.com/feed/"  # RSS
]

KEYWORDS = [
    "–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
    "deep learning", "ai", "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
    "–ø—Ä–æ—Ä—ã–≤", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "–≥–∞–¥–∂–µ—Ç", "—É–º–Ω—ã–π –¥–æ–º", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω",
    "—Ä–æ–±–æ—Ç", "–∞–≤—Ç–æ–ø–∏–ª–æ—Ç", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "—Å—Ç–∞—Ä—Ç–∞–ø"
]

SEEN_FILE = "seen_links.json"

def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram HTML (–∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–≥–∏, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç)
def clean_html_text(text):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    text = escape(text)  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–ª—è <a> –µ—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ
    if '<a href=' in text and '</a>' not in text:
        text += '</a>'
    return text

def get_one_news():
    seen = load_seen()
    candidates = []
    for url in RSS_FEEDS:
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            r.raise_for_status()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if 'xml' in r.headers.get('Content-Type', ''):
                # RSS-–ø–∞—Ä—Å–∏–Ω–≥
                root = ET.fromstring(r.content)
                for item in root.findall(".//item")[:10]:
                    link = item.findtext("link", "").strip()
                    if not link or link in seen:
                        continue
                    title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                    desc = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                    txt = (title + " " + desc).lower()
                    score = sum(1 for kw in KEYWORDS if kw in txt)
                    if score > 1:
                        candidates.append({"title": title, "desc": desc, "link": link, "score": score})
            else:
                # HTML-–ø–∞—Ä—Å–∏–Ω–≥ —Å BeautifulSoup
                soup = BeautifulSoup(r.content, 'lxml')
                articles = soup.find_all(['article', 'div'], class_=[re.compile('post|article|news|item')])[:10]
                for article in articles:
                    title_tag = article.find(['h2', 'h3', 'a'])
                    desc_tag = article.find('p')
                    link_tag = article.find('a', href=True)
                    if not title_tag or not link_tag:
                        continue
                    link = link_tag['href'].strip()
                    if not link.startswith('http'):
                        link = url + link  # –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
                    if link in seen:
                        continue
                    title = title_tag.get_text().strip()
                    desc = desc_tag.get_text().strip() if desc_tag else ""
                    txt = (title + " " + desc).lower()
                    score = sum(1 for kw in KEYWORDS if kw in txt)
                    if score > 1:
                        candidates.append({"title": title, "desc": desc, "link": link, "score": score})
        except requests.exceptions.HTTPError as he:
            print(f"[ERROR] HTTP –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {he} (–∫–æ–¥ {r.status_code}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ {url}: {e} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

    if not candidates:
        return None
    best = max(candidates, key=lambda x: x["score"])
    seen.add(best["link"])
    save_seen(seen)
    return best

def fallback_post(news):
    return (
        f"ü§ñ {news['title']}\n\n"
        "1Ô∏è‚É£ –í —á–µ–º —Å—É—Ç—å?\n"
        f"{news['desc'][:150]}...\n\n"
        "2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤?\n"
        "–≠—Ç–æ –º–µ–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –ò–ò!\n\n"
        "3Ô∏è‚É£ –ì–¥–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?\n"
        "–í –≥–∞–¥–∂–µ—Ç–∞—Ö –∏ –±–∏–∑–Ω–µ—Å–µ.\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç?\n"
        "–ë–æ–ª—å—à–µ —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö.\n\n"
        f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: <a href='{news['link']}'>–∑–¥–µ—Å—å</a>\n\n"
        "üí° P.S. –ù–µ–π—Ä–æ—Å–µ—Ç–∏ —É–∂–µ —É—á–∞—Ç –Ω–∞—Å —à—É—Ç–∏—Ç—å ‚Äî –∞ —è —É—á—É—Å—å —É –Ω–∏—Ö! üòâ\n\n"
        "ü§ñ –ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç @PerplexityPro\n"
        "üåê –ù–∞—à —Å–∞–π—Ç [—Å—Å—ã–ª–∫–∞]"
    )

def generate_post(news):
    if not OPENROUTER_API_KEY:
        print("[WARN] OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî fallback")
        return fallback_post(news)

    prompt = (
        "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –°–æ–∑–¥–∞–π –ø–æ—Å—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "ü§ñ [–Ø—Ä–∫–∏–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏]\n\n"
        "1Ô∏è‚É£ –í —á–µ–º —Å—É—Ç—å?\n"
        "[–ö—Ä–∞—Ç–∫–æ, –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å –∞–Ω–∞–ª–æ–≥–∏—è–º–∏, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]\n\n"
        "2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤?\n"
        "[–ü—É–Ω–∫—Ç—ã —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏, —ç–º–æ–¥–∑–∏, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø–æ–ª—å–∑—É]\n\n"
        "3Ô∏è‚É£ –ì–¥–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?\n"
        "[–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏, –≥–∞–¥–∂–µ—Ç–æ–≤, –±–∏–∑–Ω–µ—Å–∞]\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç?\n"
        "[–ü–æ–ª—å–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å —ç–º–æ–¥–∑–∏]\n\n"
        "---\n"
        "üí° P.S. [–£–º–µ—Å—Ç–Ω–∞—è —à—É—Ç–∫–∞ –∏–ª–∏ –æ—Å—Ç—Ä–∞—è —Ñ—Ä–∞–∑–∞ —Å —ç–º–æ–¥–∑–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ]\n\n"
        f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: <a href='{news['link']}'>–∑–¥–µ—Å—å</a>\n\n"
        "ü§ñ –ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç @PerplexityPro\n"
        "üåê –ù–∞—à —Å–∞–π—Ç [—Å—Å—ã–ª–∫–∞]\n\n"
        "---\n"
        f"–û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}\n"
        f"–°—Å—ã–ª–∫–∞: {news['link']}"
    )

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –ü–∏—à–∏ –∂–∏–≤–æ, –ø–æ–Ω—è—Ç–Ω–æ, —Å —é–º–æ—Ä–æ–º, –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –¥—Ä—É–∑—å—è–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∞—Ä–≥–æ–Ω, –¥–µ–ª–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 500
    }
    try:
        resp = requests.post(OPENROUTER_CHAT_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] OpenRouter API {resp.status_code}: {resp.text}")
            return fallback_post(news)
        data = resp.json()
        generated = data["choices"][0]["message"]["content"].strip()
        # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        generated = clean_html_text(generated)
        return generated
    except Exception as e:
        print(f"[ERROR] OpenRouter API: {e}")
        return fallback_post(news)

def send_message(text):
    if not TELEGRAM_TOKEN:
        print("[ERROR] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    for chat_id in CHAT_IDS:
        if not chat_id:
            continue
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
            "link_preview_options": json.dumps({
                "is_disabled": False,
                "show_above_text": True
            })
        }
        r = requests.post(url, data=payload, timeout=10)
        if r.status_code != 200:
            print(f"[ERROR] Telegram API {r.status_code} –¥–ª—è {chat_id}: {r.text}")
        else:
            print(f"[OK] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")

def main():
    news = get_one_news()
    if not news:
        print("[INFO] –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post = generate_post(news)
    send_message(post)
    print("[DONE] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")

if __name__ == "__main__":
    main()
