import os
import requests
import xml.etree.ElementTree as ET
import re
import html
import json

# ============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # 8141858682:AAG_k13Rd2WClI1SDL9W7-zC0vFuRUUkfUw
CHAT_ID        = os.getenv("CHAT_ID")        # 6983437462
AI_API_KEY     = os.getenv("AI_API_KEY")     # sk-or-v1-...
AI_MODEL       = os.getenv("AI_MODEL", "deepseek-chat")
AI_URL         = os.getenv("AI_URL", "https://api.deepseek.com/v1/chat/completions")

# RSS-–ª–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/artificial_intelligence/"
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
KEYWORDS = [
    "–ò–ò", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
]

SEEN_FILE = "seen_links.json"


# ============================
# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º seen_links.json
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(links):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(links), f, ensure_ascii=False, indent=2)


# ============================
# –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
# ============================
def get_one_news():
    seen = load_seen()
    for url in RSS_FEEDS:
        try:
            resp = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            resp.raise_for_status()
            root = ET.fromstring(resp.content)
            for item in root.findall(".//item")[:5]:
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc  = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                text = (title + " " + desc).lower()
                if any(kw.lower() in text for kw in KEYWORDS):
                    seen.add(link)
                    save_seen(seen)
                    return {"title": title, "desc": desc, "link": link}
        except Exception:
            continue
    return None


# ============================
# Fallback-–ø–æ—Å—Ç –±–µ–∑ AI
# ============================
def fallback_post(news):
    return (
        f"üîç {news['title']}\n\n"
        f"4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\nüîó {news['link']}\n\n"
        "üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è'
        '<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è'
        '<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
    )


# ============================
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ DeepSeek API
# ============================
def generate_post(news):
    if not AI_API_KEY:
        return fallback_post(news)

    prompt = (
        f"–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò. –°–æ—Å—Ç–∞–≤—å Telegram-–ø–æ—Å—Ç:\n\n"
        f"üîç {news['title']}\n\n"
        "1Ô∏è‚É£ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
        "[1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏]\n\n"
        "2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?\n"
        "[–∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ñ–µ—Ä—ã –ò–ò]\n\n"
        "4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
        f"üîó {news['link']}\n\n"
        "üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è'
        '<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è'
        '<a href="https://brainaid.ru/">–°–∞–π—Ç</a>\n\n'
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}"
    )

    headers = {
        "Authorization": f"Bearer {AI_API_KEY}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    payload = {
        "model": AI_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 400
    }

    try:
        resp = requests.post(AI_URL, headers=headers, json=payload, timeout=30)
        if resp.status_code != 200:
            return fallback_post(news)
        data = resp.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception:
        return fallback_post(news)


# ============================
# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
# ============================
def send_message(text):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        print("ERROR: TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False,
        "link_preview_options": json.dumps({
            "is_disabled": False,
            "show_above_text": True
        })
    }
    resp = requests.post(url, data=payload, timeout=10)
    if resp.status_code != 200:
        print(f"Telegram API Error {resp.status_code}: {resp.text}")


# ============================
# MAIN
# ============================
def main():
    news = get_one_news()
    if not news:
        print("INFO: –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò")
        return

    print(f"INFO: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post = generate_post(news)
    send_message(post)
    print("DONE: –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
