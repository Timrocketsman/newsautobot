import requests
import xml.etree.ElementTree as ET
import re
import random
import html
import json
import os

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================
TELEGRAM_TOKEN = "8141858682:AAG_k13Rd2WClI1SDL9W7-zC0vFuRUUkfUw"
CHAT_ID        = "6983437462"       # —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –õ–°
CHANNEL_ID     = "-1002047105840"   # –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –≤ –∫–∞–Ω–∞–ª

# –°–ø–∏—Å–æ–∫ –∏–∑ ~100 —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö RSS-–ª–µ–Ω—Ç–æ—á–µ–∫ –ø–æ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    # ... –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ª–µ–Ω—Ç—ã:
    "https://tproger.ru/rss",
    "https://geekbrains.ru/posts/rss",
    "https://function.python/rss",  # –ø—Ä–∏–º–µ—Ä
    # –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–æ 100 URL
]

KEYWORDS = [
    "–ò–ò", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "AI",
    "–º–æ–¥–µ–ª—å", "LLM", "GPT", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "—Ç—Ä–µ–Ω–¥",
    "–Ω–µ–π—Ä–æ", "–ø—Ä–æ–º–ø—Ç", "–∏–Ω—Ñ–µ—Ä–µ–Ω—Å", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
    "NLP", "Stable Diffusion", "Midjourney", "Claude"
]

SEEN_FILE = "seen_links.json"

# ============================
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

# ============================
# RSS-–ø–∞—Ä—Å–µ—Ä
# ============================
def parse_rss(url, seen):
    articles = []
    try:
        resp = requests.get(url, headers={"User-Agent":"Mozilla/5.0"}, timeout=10)
        resp.raise_for_status()
        root = ET.fromstring(resp.content)
        items = root.findall(".//item")[:10]
        for item in items:
            link = item.findtext("link", default="").strip()
            if not link or link in seen:
                continue
            title = item.findtext("title", default="–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
            desc  = re.sub(r"<[^>]+>", "", item.findtext("description", default="")).strip()
            text  = (title + " " + desc).lower()
            if any(kw.lower() in text for kw in KEYWORDS):
                articles.append({"title": title, "link": link})
    except Exception as e:
        print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ {url}: {e}")
    return articles

# ============================
# –°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π —Å–æ –≤—Å–µ—Ö –ª–µ–Ω—Ç
# ============================
def collect_news():
    seen = load_seen()
    fresh = []
    for feed in RSS_FEEDS:
        print(f"[INFO] –ü–∞—Ä—Å–∏–Ω–≥ {feed}")
        fresh += parse_rss(feed, seen)
    return fresh, seen

# ============================
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
# ============================
def format_post(article):
    title = article["title"]
    if len(title) > 80:
        title = title[:77].rstrip() + "..."
    link = article["link"]
    return (
        f"üîç {html.escape(title)}\n\n"
        f"4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n"
        f"üîó {html.escape(link)}\n\n"
        f"üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ\n\n"
        f"<a href=\"https://t.me/BrainAid_bot\">–ë–æ—Ç</a>‚ö´Ô∏è"
        f"<a href=\"https://t.me/m/h5Kv1jd9MWMy\">PerplexityPro</a>‚ö´Ô∏è"
        f"<a href=\"https://brainaid.ru/\">–°–∞–π—Ç</a>"
    )

# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# ============================
def send(text, to_channel=False):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHANNEL_ID if to_channel else CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    resp = requests.post(url, data=payload, timeout=10)
    if resp.status_code == 200:
        print("[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"[ERROR] Telegram API {resp.status_code}: {resp.text}")

# ============================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ============================
def main():
    fresh, seen = collect_news()
    if not fresh:
        print("[WARNING] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    article = random.choice(fresh)
    print(f"[INFO] –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {article['title'][:40]}")
    # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–∏–¥–µ–Ω–Ω—É—é
    seen.add(article["link"])
    save_seen(seen)
    post = format_post(article)
    print("[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°...")
    send(post, to_channel=False)
    # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –≤–∫–ª—é—á–∏—Ç–µ:
    # send(post, to_channel=True)

if __name__ == "__main__":
    main()
