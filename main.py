import os
import requests
import xml.etree.ElementTree as ET
import re
import html
import json

# –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–¥–ª—è Railway)

# ============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
CHAT_ID             = os.getenv("CHAT_ID")  # –û—Å–Ω–æ–≤–Ω–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6983437462)
OPENROUTER_API_KEY  = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_CHAT_URL = "https://openrouter.ai/api/v1/chat/completions"

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–¥–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ)
CHAT_IDS = [CHAT_ID, "5999167622"] if CHAT_ID else ["5999167622"]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ RSS-—Ñ–∏–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",  # Habr
    "https://vc.ru/rss/all",  # VC.ru
    "https://ria.ru/export/rss2/archive/index.xml",  # Ria (Hi-Tech Mail.ru related)
    "https://lenta.ru/rss",  # Lenta (general news, AI coverage)
    "https://3dnews.ru/news/rss",  # 3dnews
    "https://habr.com/ru/rss/hub/artificial_intelligence/",  # Habr AI hub
    "https://neuro-ai.ru/rss",  # Neuro-AI (assuming standard RSS)
    "https://hi-tech.mail.ru/rss/all/",  # Hi-Tech Mail.ru
    "https://forbes.ru/rss",  # Forbes.ru (general, AI articles)
    "https://neurohive.io/en/rss/",  # Neurohive
    "https://www.aimagazine.com/rss",  # AI Magazine
    "https://spectrum.ieee.org/topic/neural-networks/rss",  # IEEE Spectrum Neural Networks
    "https://www.technology.org/category/artificial-intelligence/feed/",  # Technology.org AI & Neural Networks
    "https://artificialintelligence-news.com/feed/"  # ArtificialIntelligence-News
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π (–¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–º—ã –ø—Ä–æ—Ä—ã–≤–æ–≤, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π, –∑–∞–±–∞–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
KEYWORDS = [
    "–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–ø—Ä–æ—Ä—ã–≤", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "–≥–∞–¥–∂–µ—Ç", "—É–º–Ω—ã–π –¥–æ–º",
    "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "—Ä–æ–±–æ—Ç", "–∞–≤—Ç–æ–ø–∏–ª–æ—Ç", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–∏–≥—Ä–æ–≤–æ–π", "–±–∏–∑–Ω–µ—Å", "—Å—Ç–∞—Ä—Ç–∞–ø"
]

SEEN_FILE = "seen_links.json"


# ============================
# –†–∞–±–æ—Ç–∞ —Å seen_links.json
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)


# ============================
# –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å (—É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–±–æ—Ä: –∏—â–µ–º –±–æ–ª–µ–µ "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ" –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –ø—Ä–æ—Ä—ã–≤—ã/–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
# ============================
def get_one_news():
    seen = load_seen()
    candidates = []  # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ
    for url in RSS_FEEDS:
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            r.raise_for_status()
            root = ET.fromstring(r.content)
            for item in root.findall(".//item")[:10]:  # –ë–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                txt = (title + " " + desc).lower()
                # –û—Ü–µ–Ω–∫–∞ "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏": —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                score = sum(1 for kw in KEYWORDS if kw in txt)
                if score > 1:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏
                    candidates.append({"title": title, "desc": desc, "link": link, "score": score})
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ {url}: {e}")
    
    if not candidates:
        return None
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é" –ø–æ score
    best = max(candidates, key=lambda x: x["score"])
    seen.add(best["link"])
    save_seen(seen)
    return best


# ============================
# Fallback –ø–æ—Å—Ç (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å)
# ============================
def fallback_post(news):
    return (
        f"ü§ñ {news['title']}\n\n"
        "1Ô∏è‚É£ –í —á–µ–º —Å—É—Ç—å?\n"
        f"{news['desc'][:150]}...\n\n"
        "2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤?\n"
        "–≠—Ç–æ –º–µ–Ω—è–µ—Ç –∏–≥—Ä—É –≤ –ò–ò!\n\n"
        "3Ô∏è‚É£ –ì–¥–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?\n"
        "–í –≥–∞–¥–∂–µ—Ç–∞—Ö –∏ –±–∏–∑–Ω–µ—Å–µ.\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç?\n"
        "–ë–æ–ª—å—à–µ —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –≤—Å–µ—Ö.\n\n"
        f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: <a href='{news['link']}'>–∑–¥–µ—Å—å</a>\n\n"
        "üí° P.S. –ê –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É–∂–µ —É–º–Ω–µ–µ, —á–µ–º –º–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–π –∫–æ—Ñ–µ! üòâ\n\n"
        "ü§ñ –ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç @PerplexityPro\n"
        "üåê –ù–∞—à —Å–∞–π—Ç [—Å—Å—ã–ª–∫–∞]"
    )


# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∏–ª—è: –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –Ω–∞–≥–ª—è–¥–Ω—ã–π, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–ª—å–∑—É, –ª–µ–≥–∫–∞—è —à—É—Ç–∫–∞)
# ============================
def generate_post(news):
    if not OPENROUTER_API_KEY:
        print("[WARN] OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî fallback")
        return fallback_post(news)
    
    prompt = (
        "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ: –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (1Ô∏è‚É£ –í —á–µ–º —Å—É—Ç—å? —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º, 2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤? —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏, 3Ô∏è‚É£ –ì–¥–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?, 4Ô∏è‚É£ –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç? —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–ª—å–∑—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π), —Å—Å—ã–ª–∫–∞ –≤ –∫–æ–Ω—Ü–µ, P.S. —Å –ª–µ–≥–∫–æ–π —à—É—Ç–∫–æ–π. –¢–æ–Ω –∂–∏–≤–æ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫–∞–∫ –±–æ–ª—Ç–∞–µ—à—å —Å –¥—Ä—É–∑—å—è–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (47% –∂–µ–Ω—Å–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è). –§–æ–∫—É—Å –Ω–∞ —è—Å–Ω–æ—Å—Ç–∏, –∞–Ω–∞–ª–æ–≥–∏—è—Ö, –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞. –î–µ–ª–∞–π –Ω–∞–≥–ª—è–¥–Ω–æ, —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤.\n\n"
        f"–§–æ—Ä–º–∞—Ç:\n"
        f"ü§ñ [–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏]\n\n"
        "1Ô∏è‚É£ –í —á–µ–º —Å—É—Ç—å?\n"
        "[–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∞–Ω–∞–ª–æ–≥–∏–µ–π]\n\n"
        "2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤?\n"
        "[–ü—É–Ω–∫—Ç—ã —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏, —ç–º–æ–¥–∑–∏, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å/–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å/—É–¥–æ–±—Å—Ç–≤–æ]\n\n"
        "3Ô∏è‚É£ –ì–¥–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?\n"
        "[–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏/–≥–∞–¥–∂–µ—Ç–æ–≤/–±–∏–∑–Ω–µ—Å–∞]\n\n"
        "4Ô∏è‚É£ –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç?\n"
        "[–ü–æ–ª—å–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å —ç–º–æ–¥–∑–∏]\n\n"
        "---\n"
        "üí° P.S. [–õ–µ–≥–∫–∞—è —à—É—Ç–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç–µ–º–æ–π, —Å üòâ]\n\n"
        f"üîó –ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ: <a href='{news['link']}'>–∑–¥–µ—Å—å</a>\n\n"
        "ü§ñ –ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç @PerplexityPro\n"
        "üåê –ù–∞—à —Å–∞–π—Ç [—Å—Å—ã–ª–∫–∞]\n\n"
        f"---\n"
        f"–û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞: –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}\n"
        f"–°—Å—ã–ª–∫–∞: {news['link']}"
    )
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –ü–∏—à–∏ –∂–∏–≤–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, —Å —é–º–æ—Ä–æ–º, –∫–∞–∫ –¥–ª—è –¥—Ä—É–∑–µ–π ‚Äî –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–ª—å–∑–µ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —à—É—Ç–∫–æ–π."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,  # –ß—É—Ç—å –≤—ã—à–µ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∂–∏–≤–æ—Å—Ç–∏
        "max_tokens": 500
    }
    
    try:
        resp = requests.post(OPENROUTER_CHAT_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] OpenRouter API {resp.status_code}: {resp.text}")
            return fallback_post(news)
        data = resp.json()
        generated = data["choices"][0]["message"]["content"].strip()
        return generated
    except Exception as e:
        print(f"[ERROR] OpenRouter API: {e}")
        return fallback_post(news)


# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
# ============================
def send_message(text):
    if not TELEGRAM_TOKEN:
        print("[ERROR] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    for chat_id in CHAT_IDS:
        if not chat_id:
            continue
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
            "link_preview_options": json.dumps({
                "is_disabled": False,
                "show_above_text": True
            })
        }
        r = requests.post(url, data=payload, timeout=10)
        if r.status_code != 200:
            print(f"[ERROR] Telegram API {r.status_code} –¥–ª—è {chat_id}: {r.text}")
        else:
            print(f"[OK] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")


# ============================
# MAIN (—Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∞: –±–µ–∑ —Ç–∞–π–º–∏–Ω–≥–∞, –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫)
# ============================
def main():
    news = get_one_news()
    if not news:
        print("[INFO] –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post = generate_post(news)
    send_message(post)
    print("[DONE] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")


if __name__ == "__main__":
    main()
