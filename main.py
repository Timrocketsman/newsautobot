import requests
import xml.etree.ElementTree as ET
import re
import html
import json
import os
from openai import OpenAI

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================
TELEGRAM_TOKEN = "8141858682:AAG_k13Rd2WClI1SDL9W7-zC0vFuRUUkfUw"
CHAT_ID = "6983437462"  # —Ç–µ—Å—Ç –≤ –õ–°

OPENAI_KEY = "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"
client = OpenAI(api_key=OPENAI_KEY)

RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://tproger.ru/rss",
    "https://cnews.ru/xml/cnews.rss",
    "https://proglib.io/rss",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/machine-learning/",
    "https://habr.com/ru/rss/hub/artificial_intelligence/",
    "https://habr.com/ru/rss/hub/data-science/"
]

KEYWORDS = [
    "–ò–ò","–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç","–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ","deep learning","ai",
    "–º–æ–¥–µ–ª—å","llm","gpt","–≥–µ–Ω–µ—Ä–∞—Ü–∏—è","—Ç—Ä–µ–Ω–¥",
    "–Ω–µ–π—Ä–æ","–ø—Ä–æ–º–ø—Ç","–∏–Ω—Ñ–µ—Ä–µ–Ω—Å","–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
    "nlp","stable diffusion","midjourney","claude",
    "—á–∞—Ç-–±–æ—Ç","—á–∞—Ç–±–æ—Ç","qwen","gemini","–ø–µ—Ä–ø–ª–µ–∫—Å"
]

SEEN_FILE = "seen_links.json"

# ============================
# –†–∞–±–æ—Ç–∞ —Å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

# ============================
# –ü–∞—Ä—Å–µ—Ä RSS
# ============================
def parse_rss(url, seen):
    news = []
    try:
        resp = requests.get(url, headers={"User-Agent":"Mozilla/5.0"}, timeout=10)
        resp.raise_for_status()
        root = ET.fromstring(resp.content)
        for item in root.findall(".//item")[:5]:
            link = item.findtext("link", "").strip()
            if not link or link in seen:
                continue
            title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
            desc  = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
            text  = (title + " " + desc).lower()
            if any(kw in text for kw in KEYWORDS):
                news.append({"title": title, "link": link, "desc": desc})
    except Exception as e:
        print(f"[ERROR] {url}: {e}")
    return news

# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI
# ============================
def generate_post(title, desc, link):
    prompt = f"""
–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò. –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Å–∏–≤—ã–π, —Ü–µ–ø–ª—è—é—â–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram. 
–°–¥–µ–ª–∞–π –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üîç {title}

1Ô∏è‚É£ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?  
[–ö—Ä–∞—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]

2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?  
[–ü–æ—á–µ–º—É —ç—Ç–æ –∑–Ω–∞—á–∏–º–æ, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö]

4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
üîó {link}

üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ

–í–Ω–∏–∑—É –¥–æ–±–∞–≤—å:
<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>

---
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {desc}
    """
    completion = client.chat.completions.create(
        model="gpt-4o-mini",  # –±—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=300
    )
    return completion.choices[0].message.content.strip()

# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
# ============================
def send_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,  # —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ –≤ –õ–°
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    r = requests.post(url, data=payload)
    if r.status_code == 200:
        print("[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"[ERROR] Telegram {r.status_code}: {r.text}")

# ============================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ============================
def main():
    seen = load_seen()
    fresh = []
    for feed in RSS_FEEDS:
        fresh += parse_rss(feed, seen)
        if fresh:  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –Ω–æ–≤–æ—Å—Ç—å
            break

    if not fresh:
        print("[INFO] –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return

    article = fresh[0]
    seen.add(article["link"])
    save_seen(seen)

    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {article['title']}")
    post_text = generate_post(article["title"], article["desc"], article["link"])
    send_message(post_text)

if __name__ == "__main__":
    main()
