import requests
import xml.etree.ElementTree as ET
import re
import html
import json
import os

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================
TELEGRAM_TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"
CHAT_ID        = "6983437462"  # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–°
OPENAI_API_KEY = "–í–ê–®_OPENAI_PROJECT_API_KEY"

# URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
OPENAI_CHAT_URL    = "https://api.openai.com/v1/chat/completions"
TELEGRAM_SEND_URL  = "https://api.telegram.org/bot{token}/sendMessage"

RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://3dnews.ru/news/rss",
    "https://habr.com/ru/rss/hub/artificial_intelligence/"
]

KEYWORDS = [
    "–ò–ò","–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç","–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ","deep learning","ai",
    "–º–æ–¥–µ–ª—å","llm","gpt","–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
]

SEEN_FILE = "seen_links.json"


# ============================
# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)


# ============================
# –ü–æ–∏—Å–∫ –æ–¥–Ω–æ–π —Å–≤–µ–∂–µ–π –Ω–æ–≤–æ—Å—Ç–∏
# ============================
def get_one_news():
    seen = load_seen()
    for feed_url in RSS_FEEDS:
        try:
            resp = requests.get(feed_url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            resp.raise_for_status()
            root = ET.fromstring(resp.content)
            for item in root.findall(".//item")[:5]:
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc  = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                combined = (title + " " + desc).lower()
                if any(kw.lower() in combined for kw in KEYWORDS):
                    seen.add(link)
                    save_seen(seen)
                    return {"title": title, "desc": desc, "link": link}
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ RSS {feed_url}: {e}")
    return None


# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Chat Completions API
# ============================
def generate_post(news):
    prompt = f"""
–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò. –°–æ—Å—Ç–∞–≤—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π Telegram-–ø–æ—Å—Ç:

üîç {news['title']}

1Ô∏è‚É£ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?
[1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏]

2Ô∏è‚É£ –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?
[–∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ñ–µ—Ä—ã –ò–ò/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π]

4Ô∏è‚É£ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:
üîó {news['link']}

üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ

<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è
<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è
<a href="https://brainaid.ru/">–°–∞–π—Ç</a>

---
–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {news['desc']}
"""
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 300
    }
    response = requests.post(OPENAI_CHAT_URL, headers=headers, json=data, timeout=30)
    response.raise_for_status()
    content = response.json()
    return content["choices"][0]["message"]["content"]


# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram sendMessage API
# ============================
def send_message(text):
    url = TELEGRAM_SEND_URL.format(token=TELEGRAM_TOKEN)
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False,
        "link_preview_options": json.dumps({
            "is_disabled": False,
            "show_above_text": True
        })
    }
    resp = requests.post(url, data=payload, timeout=10)
    if resp.status_code != 200:
        print(f"[ERROR] Telegram API {resp.status_code}: {resp.text}")


# ============================
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ============================
def main():
    news = get_one_news()
    if not news:
        print("[INFO] –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
    post_text = generate_post(news)
    send_message(post_text)
    print("[DONE] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")


if __name__ == "__main__":
    main()
