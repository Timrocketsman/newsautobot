import os
import requests
import xml.etree.ElementTree as ET
import re
import html
import json
import schedule
import time

# –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # –ï—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–¥–ª—è Railway)

# ============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ============================
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
CHAT_ID             = os.getenv("CHAT_ID")  # –û—Å–Ω–æ–≤–Ω–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6983437462)
OPENROUTER_API_KEY  = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_CHAT_URL = "https://openrouter.ai/api/v1/chat/completions"

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–¥–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ)
CHAT_IDS = [CHAT_ID, "5999167622"] if CHAT_ID else ["5999167622"]

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ RSS-—Ñ–∏–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",  # Habr
    "https://vc.ru/rss/all",  # VC.ru
    "https://ria.ru/export/rss2/archive/index.xml",  # Ria (Hi-Tech Mail.ru related)
    "https://lenta.ru/rss",  # Lenta (general news, AI coverage)
    "https://3dnews.ru/news/rss",  # 3dnews
    "https://habr.com/ru/rss/hub/artificial_intelligence/",  # Habr AI hub
    "https://neuro-ai.ru/rss",  # Neuro-AI (assuming standard RSS)
    "https://hi-tech.mail.ru/rss/all/",  # Hi-Tech Mail.ru
    "https://forbes.ru/rss",  # Forbes.ru (general, AI articles)
    "https://neurohive.io/en/rss/",  # Neurohive
    "https://www.aimagazine.com/rss",  # AI Magazine
    "https://spectrum.ieee.org/topic/neural-networks/rss",  # IEEE Spectrum Neural Networks
    "https://www.technology.org/category/artificial-intelligence/feed/",  # Technology.org AI & Neural Networks
    "https://artificialintelligence-news.com/feed/"  # ArtificialIntelligence-News
]

KEYWORDS = [
    "–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "deep learning", "ai",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
]

SEEN_FILE = "seen_links.json"


# ============================
# –†–∞–±–æ—Ç–∞ —Å seen_links.json
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)


# ============================
# –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
# ============================
def get_one_news():
    seen = load_seen()
    for url in RSS_FEEDS:
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
            r.raise_for_status()
            root = ET.fromstring(r.content)
            for item in root.findall(".//item")[:5]:
                link = item.findtext("link", "").strip()
                if not link or link in seen:
                    continue
                title = item.findtext("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
                desc = re.sub(r"<[^>]+>", "", item.findtext("description", "")).strip()
                txt = (title + " " + desc).lower()
                if any(kw in txt for kw in KEYWORDS):
                    seen.add(link)
                    save_seen(seen)
                    return {"title": title, "desc": desc, "link": link}
        except Exception as e:
            print(f"[ERROR] –ü–∞—Ä—Å–∏–Ω–≥ {url}: {e}")
    return None


# ============================
# Fallback –ø–æ—Å—Ç (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ –Ω–æ–≤—É—é —Ä–æ–ª—å)
# ============================
def fallback_post(news):
    return (
        f"üîç {news['title']}\n\n"
        f"{news['desc'][:200]}...\n\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href='{news['link']}'>–∑–¥–µ—Å—å</a>.\n\n"
        "üí° –ê –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É–∂–µ –∑–Ω–∞—é—Ç, —á—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –∫–æ—Ñ–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
    )


# ============================
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å)
# ============================
def generate_post(news):
    if not OPENROUTER_API_KEY:
        print("[WARN] OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî fallback")
        return fallback_post(news)
    
    prompt = (
        "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –°–æ–∑–¥–∞–π –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ—Å—Ç–∏: —è—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å –∞–Ω–∞–ª–æ–≥–∏—è–º–∏, —É—á–∏—Ç—ã–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—é –æ—Ç –Ω–æ–≤–∏—á–∫–æ–≤ –¥–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, 47% –∂–µ–Ω—Å–∫–∞—è, 53% –º—É–∂—Å–∫–∞—è), –∑–∞–≤–µ—Ä—à–∏ —É–º–µ—Å—Ç–Ω–æ–π —à—É—Ç–∫–æ–π –∏–ª–∏ –æ—Å—Ç—Ä–æ–π —Ñ—Ä–∞–∑–æ–π —Å —ç–º–æ–¥–∑–∏. –¢–æ–Ω –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞. –ó–∞—à–∏–≤–∞–π —Å—Å—ã–ª–∫—É –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ HTML-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href=\"{link}\">–∑–¥–µ—Å—å</a>').\n\n"
        f"–§–æ—Ä–º–∞—Ç:\n"
        f"üîç [–Ø—Ä–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏]\n\n"
        "[–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤]\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–π—Ç–µ <a href='{news['link']}'>–∑–¥–µ—Å—å</a>.\n\n"
        "üí° [–®—É—Ç–∫–∞ –∏–ª–∏ –æ—Å—Ç—Ä–∞—è —Ñ—Ä–∞–∑–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç–µ–º–æ–π, —Å —ç–º–æ–¥–∑–∏] üöÄ\n\n"
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>\n\n'
        f"---\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏: {news['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['desc']}\n"
        f"–°—Å—ã–ª–∫–∞: {news['link']}"
    )
    
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    body = {
        "model": "gpt-3.5-turbo",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ '–ù–µ–π—Ä–æ—Å–µ—Ç–∏: –ü—Ä–æ—Å—Ç–æ –æ –°–ª–æ–∂–Ω–æ–º'. –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –¥–ª—è –¥—Ä—É–∑–µ–π, –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —à—É—Ç–∫–æ–π."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.6,
        "max_tokens": 500  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    }
    
    try:
        resp = requests.post(OPENROUTER_CHAT_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            print(f"[ERROR] OpenRouter API {resp.status_code}: {resp.text}")
            return fallback_post(news)
        data = resp.json()
        generated = data["choices"][0]["message"]["content"].strip()
        # –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ—á–∫—É, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if '<a href="https://t.me/BrainAid_bot">' not in generated:
            generated += '\n\n<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
        return generated
    except Exception as e:
        print(f"[ERROR] OpenRouter API: {e}")
        return fallback_post(news)


# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
# ============================
def send_message(text):
    if not TELEGRAM_TOKEN:
        print("[ERROR] TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    for chat_id in CHAT_IDS:
        if not chat_id:
            continue
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": False,
            "link_preview_options": json.dumps({
                "is_disabled": False,
                "show_above_text": True
            })
        }
        r = requests.post(url, data=payload, timeout=10)
        if r.status_code != 200:
            print(f"[ERROR] Telegram API {r.status_code} –¥–ª—è {chat_id}: {r.text}")
        else:
            print(f"[OK] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")


# ============================
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ (—Ç—Ä–∏ –ø–æ—Å—Ç–∞ –≤ —á–∞—Å)
# ============================
def job():
    for _ in range(3):  # –¢—Ä–∏ –ø–æ—Å—Ç–∞ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫
        news = get_one_news()
        if not news:
            print("[INFO] –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ—Å—Ç–∞")
            continue
        print(f"[INFO] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è: {news['title']}")
        post = generate_post(news)
        send_message(post)
        print("[DONE] –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏


# ============================
# MAIN —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (–∫–∞–∂–¥—ã–π —á–∞—Å, —Ç—Ä–∏ –ø–æ—Å—Ç–∞)
# ============================
def main():
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –∫–∞–∂–¥—ã–π —á–∞—Å, –∑–∞–ø—É—Å–∫ job (—Ç—Ä–∏ –ø–æ—Å—Ç–∞)
    schedule.every(1).hours.do(job)

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ—Å—Ç–∏–Ω–≥ —Ç—Ä–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, 365 –¥–Ω–µ–π –≤ –≥–æ–¥—É.")
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    main()
