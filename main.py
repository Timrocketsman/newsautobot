import requests
import xml.etree.ElementTree as ET
import re
import random
import html
import json
import os

# ============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ============================
TELEGRAM_TOKEN = "8141858682:AAG_k13Rd2WClI1SDL9W7-zC0vFuRUUkfUw"
CHAT_ID        = "6983437462"       # –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
CHANNEL_ID     = "-1002047105840"   # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö RSS-–ª–µ–Ω—Ç (~100 –ø—Ä–∏–º–µ—Ä–æ–≤).
RSS_FEEDS = [
    "https://habr.com/ru/rss/all/all/",
    "https://vc.ru/rss/all",
    "https://ria.ru/export/rss2/archive/index.xml",
    "https://lenta.ru/rss",
    "https://tproger.ru/rss",
    "https://geekbrains.ru/posts/rss",
    "https://cnews.ru/xml/cnews.rss",
    "https://www.vedomosti.ru/rss/news.xml",
    "https://www.computerra.ru/rss.xml",
    "https://3dnews.ru/news/rss",
    "https://www.ixbt.com/export/news.xml",
    "https://www.securitylab.ru/_services/export/rss2/news/",
    "https://vc.ru/rss/technology",
    "https://dou.ua/feed/",
    "https://proglib.io/rss",
    "https://habr.com/ru/rss/hub/machine-learning/",
    "https://habr.com/ru/rss/hub/artificial_intelligence/",
    "https://habr.com/ru/rss/hub/data-science/",
    # ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–µ–Ω—Ç—ã
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
KEYWORDS = [
    "–ò–ò", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
    "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ai", "deep learning",
    "–º–æ–¥–µ–ª—å", "llm", "gpt", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "—Ç—Ä–µ–Ω–¥",
    "–Ω–µ–π—Ä–æ", "–ø—Ä–æ–º–ø—Ç", "–∏–Ω—Ñ–µ—Ä–µ–Ω—Å", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
    "nlp", "stable diffusion", "midjourney", "claude",
    "—á–∞—Ç-–±–æ—Ç", "—á–∞—Ç–±–æ—Ç", "qwen", "gemini", "–ø–µ—Ä–ø–ª–µ–∫—Å"
]

SEEN_FILE = "seen_links.json"

# ============================
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
# ============================
def load_seen():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f, ensure_ascii=False, indent=2)

# ============================
# –ü–∞—Ä—Å–µ—Ä RSS —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —É—á–µ—Ç–æ–º –¥—É–±–ª–µ–π
# ============================
def parse_rss(url, seen):
    articles = []
    try:
        resp = requests.get(url, headers={"User-Agent":"Mozilla/5.0"}, timeout=10)
        resp.raise_for_status()
        root = ET.fromstring(resp.content)
        items = root.findall(".//item")[:10]
        for item in items:
            link = item.findtext("link", default="").strip()
            if not link or link in seen:
                continue
            title = item.findtext("title", default="–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞").strip()
            desc  = re.sub(r"<[^>]+>", "", item.findtext("description", default="")).strip()
            text  = (title + " " + desc).lower()
            if any(kw.lower() in text for kw in KEYWORDS):
                articles.append({"title": title, "link": link})
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
    return articles

# ============================
# –°–±–æ—Ä –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
# ============================
def collect_news():
    seen = load_seen()
    fresh = []
    for feed in RSS_FEEDS:
        print(f"[INFO] –ü–∞—Ä—Å–∏–Ω–≥ {feed}")
        fresh += parse_rss(feed, seen)
    return fresh, seen

# ============================
# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: —Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É
# ============================
def format_message(article):
    title = article["title"]
    if len(title) > 80:
        title = title[:77].rstrip() + "..."
    link = article["link"]
    # –°–Ω–∞—á–∞–ª–∞ —Å—Å—ã–ª–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–≤—å—é –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –≤–≤–µ—Ä—Ö—É
    msg = f"{html.escape(link)}\n\n"
    msg += f"üîç {html.escape(title)}\n\n"
    msg += "üí° P.S. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ\n\n"
    msg += (
        '<a href="https://t.me/BrainAid_bot">–ë–æ—Ç</a>‚ö´Ô∏è'
        '<a href="https://t.me/m/h5Kv1jd9MWMy">PerplexityPro</a>‚ö´Ô∏è'
        '<a href="https://brainaid.ru/">–°–∞–π—Ç</a>'
    )
    return msg

# ============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram HTTP API
# ============================
def send_message(text, to_channel=False):
    chat_id = CHANNEL_ID if to_channel else CHAT_ID
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": False
    }
    resp = requests.post(url, data=payload, timeout=10)
    if resp.status_code == 200:
        print("[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"[ERROR] Telegram API {resp.status_code}: {resp.text}")

# ============================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ============================
def main():
    fresh, seen = collect_news()
    if not fresh:
        print("[WARNING] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    article = random.choice(fresh)
    seen.add(article["link"])
    save_seen(seen)

    print(f"[INFO] –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {article['title'][:40]}")
    message = format_message(article)
    print("[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°...")
    send_message(message, to_channel=False)
    # –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    # send_message(message, to_channel=True)

if __name__ == "__main__":
    main()
